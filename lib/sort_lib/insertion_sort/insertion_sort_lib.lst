     1                                  ;------------------------------------------------------------------------------
     2                                  ; Object file	:	insertion_sort_lib.o
     3                                  ; Version		:	0.0
     4                                  ; Created date 	:	2018-01-20
     5                                  ; Last update	:	2018-01-22
     6                                  ; Author		:	Boris
     7                                  ; Description	:	insertion sort sub-library
     8                                  ;
     9                                  ; Assemble		: see ../../makefile
    10                                  ;------------------------------------------------------------------------------
    11                                  
    12                                  section .text
    13                                  	global insertion_sort			; declaring global access for
    14                                  									; insertion_sort
    15                                  
    16                                  ;------------------------------------------------------------------------------
    17                                  ; insertion_sort	:	sorts provided string of dwords in accending order
    18                                  ; updated			:	2018-01-20
    19                                  ; in				:	esi - array pointer
    20                                  ;						ecx	- array length
    21                                  ; out				:	esi - array pointer
    22                                  ; modifies			:	[none]
    23                                  ; calls				:	[none]
    24                                  ;
    25                                  
    26                                  insertion_sort:
    27 00000000 56                      	push esi						;
    28 00000001 50                      	push eax						;
    29 00000002 53                      	push ebx						; preserving registers
    30 00000003 51                      	push ecx						;
    31 00000004 52                      	push edx						;
    32 00000005 57                      	push edi						;
    33                                  
    34 00000006 BB01000000              	mov ebx,0x01					; setting start index counter to 1
    35                                  .loop_1:
    36 0000000B 39CB                    	cmp ebx,ecx						; check if index counter reached end of
    37                                  									; string
    38 0000000D 7722                    	ja .done						; go to .done if so
    39 0000000F 8B149E                  	mov edx,[esi+ebx*4]				; copy current element to edx
    40                                  
    41 00000012 4B                      	dec ebx							;
    42 00000013 89D8                    	mov eax,ebx						; set subcounter to counter-1
    43 00000015 43                      	inc ebx							;
    44                                  .loop_2:
    45 00000016 83F8FF                  	cmp eax,0xffffffff				; check if subcounter is -1
    46 00000019 740F                    	je .after_1						; go to after-outer-loop subroutine
    47 0000001B 391486                  	cmp [esi+eax*4],edx				; check if current element is less then
    48                                  									; the one denoted by current subcounter
    49 0000001E 760A                    	jbe .after_1					; go to after-outer-loop subroutine
    50                                  
    51 00000020 8B3C86                  	mov edi,[esi+eax*4]				; move element denoted by subcounter to
    52 00000023 897C8604                	mov [esi+eax*4+4],edi			; an element right after it
    53 00000027 48                      	dec eax							; decrement subcouter
    54 00000028 EBEC                    	jmp .loop_2						; repeat inner loop
    55                                  .after_1:
    56 0000002A 89548604                	mov [esi+eax*4+4],edx			; move current element to an element
    57                                  									; right after the one denoted by subcounter
    58 0000002E 43                      	inc ebx							; increment index counter
    59 0000002F EBDA                    	jmp .loop_1						; repeat outer loop
    60                                  .done:
    61 00000031 5F                      	pop edi							;
    62 00000032 5A                      	pop edx							;
    63 00000033 59                      	pop ecx							; retrieving registers
    64 00000034 5B                      	pop ebx							;
    65 00000035 58                      	pop eax							;
    66 00000036 5E                      	pop esi							;
    67                                  
    68 00000037 C3                      	ret								; returning control
